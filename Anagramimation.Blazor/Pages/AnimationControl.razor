@using Fluxor
@using Anagramimation.Blazor.Flux
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<Animation/>

<Row>
    @for (var i = 0; i < State.Value.StepConfigs.Count; i++)
{
    var index = i;
    <WordControl Index="@index" />
}
</Row>



<Drawer
    OnClose="() => Dispatcher.Dispatch(new CloseEditingConfig())"
    Visible="@(State.Value.EditingConfigIndex != null)"
    Placement="bottom">
    @if (State.Value.EditingConfigIndex.HasValue)
    {
        <StepConfigEditor Index="State.Value.EditingConfigIndex.Value"/>
    }
</Drawer>

<div>
    <InputGroup>
        <Col>
            <Tag>Font @State.Value.Config.FontPixels</Tag>
            <Slider TooltipVisible="true" Dots="true" Min="1" Max="100" Step="1" OnChange="@(v=>Dispatch(x=>x with{FontPixelsDouble=v}))" Value="@State.Value.Config.FontPixelsDouble"/>
            <Tag>Width @State.Value.Config.RelativeWidth</Tag>
            <Slider TooltipVisible="true" Min="0" Max="3" OnChange="@(v=>Dispatch(x=>x with{RelativeWidth= v}))" Value="@State.Value.Config.RelativeWidth"/>
            <Select
                TItem="AnimationTiming"
                TItemValue="AnimationTiming"
                OnSelectedItemChanged="@(v=>Dispatch(x=>x with{Timing= v}))"
                Value="@State.Value.Config.Timing">
                <SelectOptions>
                    @foreach (var v in Enum.GetValues<AnimationTiming>())
                    {
                        <SelectOption TItem="AnimationTiming" TItemValue="AnimationTiming" Value="@v" Label="@v.ToString()"/>
                    }
                </SelectOptions>
            </Select>
        </Col>''
    </InputGroup>
    <Paragraph Copyable CopyConfig="@(new TypographyCopyableConfig(){Text = State.Value.GetHtml()})" Editable="false">
        HTML
    </Paragraph>
</div>


@code {


    [Inject]
    private IState<State> State { get; set; } = null!;

    [Inject]
    public IDispatcher Dispatcher { get; set; } = null!;

    private void Dispatch(Func<AnimationGlobalConfig, AnimationGlobalConfig> func)
    {
        var action = new SetGlobalConfigAction(func);
        Dispatcher.Dispatch(action);
    }
}