@using Fluxor
@using System.Security.Cryptography.X509Certificates
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<Animation/>

@for (var i = 0; i < State.Value.StepConfigs.Count; i++)
{
    var index = i;
    <WordControl Index="@index" />
}
<Button OnClick="@(() => Dispatcher.Dispatch(new AddAction("Hello", new AnimationStepConfig())))">+</Button>


<div>
    <InputGroup>
        <Col>
            <Tag>Font @State.Value.Config.FontPixels</Tag>
            <Slider Dots="true" Min="1" Max="100" Step="1" OnChange="@(v=>Dispatch(x=>x with{FontPixelsDouble=v}))" Value="@State.Value.Config.FontPixelsDouble"/>
            <Tag>Width @State.Value.Config.RelativeWidth</Tag>
            <Slider Min="0" Max="3" OnChange="@(v=>Dispatch(x=>x with{RelativeWidth= v}))" Value="@State.Value.Config.RelativeWidth"/>
            <Select
                TItem="AnimationTiming"
                TItemValue="AnimationTiming"
                OnSelectedItemChanged="@(v=>Dispatch(x=>x with{Timing= v}))"
                Value="@State.Value.Config.Timing">
                <SelectOptions>
                    @foreach (var v in Enum.GetValues<AnimationTiming>())
                    {
                        <SelectOption TItem="AnimationTiming" TItemValue="AnimationTiming" Value="@v" Label="@v.ToString()"/>
                    }
                </SelectOptions>
            </Select>
        </Col>

    </InputGroup>
    <Paragraph Copyable CopyConfig="@(new TypographyCopyableConfig(){Text = State.Value.GetHtml()})" Editable="false">
        HTML
    </Paragraph>
    <Button OnClick="Sync">Sync</Button>
</div>


@code {


    [Inject]
    private IState<State> State { get; set; }

    [Inject]
    public IDispatcher Dispatcher { get; set; }

    private void Dispatch(Func<AnimationGlobalConfig, AnimationGlobalConfig> func)
    {
        var action = new SetGlobalConfigAction(func);
        Dispatcher.Dispatch(action);
    }

    private async void Sync()
    {
        Dispatch(x=>x with{Enable = false});
        await Task.Delay(100);
        Dispatch(x => x with{Enable = true});
    }


}