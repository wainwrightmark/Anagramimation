@using Fluxor
@using Anagramimation.Blazor.Flux
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<Col>
    <Input AllowClear="true"
           Value="@Word"
           TValue="String"
           OnChange="@(WordChanged)"
           Placeholder="@(Defaults.GetPlaceHolder(Index))"/>
    <Button Icon="close" OnClick="Close"></Button>
    <Button Icon="plus" OnClick="AddNew"></Button>
    <Button Icon="edit" OnClick="Edit"></Button>
</Col>

@*<Row>
    <Col Span="3">


    </Col>
</Row>

<Row>
    <Col Span="1">
        <Button Icon="close" OnClick="Close"></Button>
    </Col>
    <Col Span="1">
        <Button Icon="plus" OnClick="AddNew"></Button>
    </Col>
    <Col Span="1">
        <Button Icon="edit" OnClick="Edit"></Button>
    </Col>
</Row>*@


@code
{

    [Inject]
    private IState<State> State { get; set; } = null!;

    [Inject]
    public IDispatcher Dispatcher { get; set; } = null!;

    [Parameter]
    public int Index { get; set; }

    public string Word => State.Value.WordList.Words[Index];

    private void WordChanged(string w)
    {
        if (w != Word)
            Dispatcher.Dispatch(new SetWordAction(Index, w ?? ""));
    }

    public void AddNew()
    {
        var i = State.Value.WordList.Words.Count;
        var word = Defaults.GetWord(i);
        var config = Defaults.GetStepConfig(i);
        Dispatcher.Dispatch(new AddAction(word, Index + 1, config));
    }

    public void Close()
    {
        Dispatcher.Dispatch(new RemoveWordAction(Index));
    }

    public void Edit()
    {
        Dispatcher.Dispatch(new OpenEditingConfig(Index));
    }

    public void Jump()
    {
        Dispatcher.Dispatch(new JumpToAction(Index));
    }

}