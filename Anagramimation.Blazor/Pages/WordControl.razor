@using Fluxor
@inherits Fluxor.Blazor.Web.Components.FluxorComponent



<Input AllowClear="true"
       Value="@Word"
       TValue="String"
       OnChange="@(WordChanged)"
       Placeholder="@(Anagramimation.State.InitialValues[Index].PlaceHolder)"
/>
<Button OnClick="Close">x</Button>
<Collapse>
    <Panel Header="Advanced">
        <InputGroup>
            <Col>

                <Tag>Duration @Config.DurationSecondsDouble.ToString("G2")</Tag>
                <Slider TooltipVisible="true" Dots="true" Min="1" Max="10" Step="1" OnChange="@(v=>Dispatch(x=>x with{DurationSecondsDouble= v}))" Value="@Config.DurationSecondsDouble"/>
                <Tag>Max Height @Config.MaxHeightFactor.ToString("G2")</Tag>
                <Slider TooltipVisible="true"
                        TValue="(double, double)"
                        Dots="true"
                        Min="0"
                        Max="5"
                        Step="0.2"
                        DefaultValue="(AnimationStepConfig.DefaultMinHeight,AnimationStepConfig.DefaultMaxHeight)"
                        OnChange="@((v)=>Dispatch(x=>x with{MinHeightFactor = v.Item1,MaxHeightFactor= v.Item2}))"
                        />

                @for(var i = 1; i <= Config.Pattern.NumberOfWaypoints; i++)
                {
                    var index = i;
                    <Tag>Waypoint @index @(Config.GetWaypoint(index).ToString("G2"))</Tag>
                    <Slider TooltipVisible="true" Dots="true" Min="0" Max="1" Step="0.05"
                            OnChange="@(v=> Dispatch(c=>c.SetWaypoint(index,v)))"
                            Value="@(Config.GetWaypoint(index))"/>
                }



                <Select
                TItem="PatternEnum"
                TItemValue="PatternEnum"
                OnSelectedItemChanged="@SetPattern"
                Value="@Config.Pattern.PatternEnum">
                <SelectOptions>
                    @foreach (var v in Enum.GetValues<PatternEnum>())
                    {
                        <SelectOption TItem="PatternEnum" TItemValue="PatternEnum" Value="@v" Label="@v.ToString()"/>
                    }
                </SelectOptions>
            </Select>
            </Col>

        </InputGroup>
    </Panel>
</Collapse>


@code
{

    [Inject]
    private IState<State> State { get; set; }

    [Inject]
    public IDispatcher Dispatcher { get; set; }

    [Parameter]
    public int Index { get; set; }

    public AnimationStepConfig Config => State.Value.StepConfigs[Index];

    public string Word => State.Value.WordList.Words[Index];

    private void WordChanged(string w)
    {
        Dispatcher.Dispatch(new SetWordAction(Index, w??""));
    }

    private void Dispatch(Func<AnimationStepConfig, AnimationStepConfig> func)
    {
        var action = new SetConfigAction(Index, func);
        Dispatcher.Dispatch(action);
    }

    public void SetPattern(PatternEnum patternEnum)
    {
        var pattern = Pattern.GetPattern(patternEnum);
        var action = new SetConfigAction(Index, x=> x with{Pattern = pattern});
        Dispatcher.Dispatch(action);
    }

    public void Close()
    {
        Dispatcher.Dispatch(new RemoveWordAction(Index));
    }

}