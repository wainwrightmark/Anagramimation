@using Fluxor
@inherits Fluxor.Blazor.Web.Components.FluxorComponent



<Input AllowClear="true" Value="@Word" TValue="String" OnChange="@(WordChanged)" Placeholder="Try Typing Your Name"/>
<Collapse>
    <Panel Header="Advanced">
        <InputGroup>
            <Col>

                <Tag>Duration @Config.DurationSecondsDouble</Tag>
                <Slider Dots="true" Min="1" Max="10" Step="1" OnChange="@(v=>Dispatch(x=>x with{DurationSecondsDouble= v}))" Value="@Config.DurationSecondsDouble"/>
                <Tag>Max Height @Config.MaxHeightFactor</Tag>
                <Slider Dots="true" Min="0" Max="3" Step="0.1" OnChange="@(v=>Dispatch(x=>x with{MaxHeightFactor= v}))" Value="@Config.MaxHeightFactor"/>
                <Tag>Min Height @Config.MinHeightFactor</Tag>
                <Slider Dots="true" Min="0" Max="3" Step="0.1" OnChange="@(v=>Dispatch(x=>x with{MinHeightFactor= v}))" Value="@Config.MinHeightFactor"/>

                @for(var i = 1; i <= Config.Pattern.NumberOfWaypoints; i++)
                {
                    var index = i;
                    <Tag>Waypoint @index @(Config.GetWaypoint(index))</Tag>
                    <Slider Dots="true" Min="0" Max="1" Step="0.05"
                            OnChange="@(v=> Dispatch(c=>c.SetWaypoint(index,v)))"
                            Value="@(Config.GetWaypoint(index))"/>
                }



                <Select
                TItem="PatternEnum"
                TItemValue="PatternEnum"
                OnSelectedItemChanged="@(v=>Dispatch(x=>x with{Pattern= Pattern.GetPattern(v)}))"
                Value="@Config.Pattern.PatternEnum">
                <SelectOptions>
                    @foreach (var v in Enum.GetValues<PatternEnum>())
                    {
                        <SelectOption TItem="PatternEnum" TItemValue="PatternEnum" Value="@v" Label="@v.ToString()"/>
                    }
                </SelectOptions>
            </Select>
            </Col>

        </InputGroup>
    </Panel>
</Collapse>


@code
{

    [Inject]
    private IState<State> State { get; set; }

    [Inject]
    public IDispatcher Dispatcher { get; set; }

    [Parameter]
    public int Index { get; set; }

    public AnimationStepConfig Config => State.Value.StepConfigs[Index];

    public string Word => State.Value.WordList.Words[Index];

    private void WordChanged(string w)
    {
        Dispatcher.Dispatch(new SetWordAction(Index, w));
    }

    private void Dispatch(Func<AnimationStepConfig, AnimationStepConfig> func)
    {
        var action = new SetConfigAction(Index, func);
        Dispatcher.Dispatch(action);
    }

}